#define RESTRICT __restrict__

void star1(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=1; j<n-1; ++j) {
          out(i,j) += +in(i+-1,j+0) * -0.5
                      +in(i+0,j+-1) * -0.5
                      +in(i+0,j+1) * 0.5
                      +in(i+1,j+0) * 0.5;
       }
     });
}

void star2(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=2; j<n-2; ++j) {
          out(i,j) += +in(i+-2,j+0) * -0.125
                      +in(i+-1,j+0) * -0.25
                      +in(i+0,j+-2) * -0.125
                      +in(i+0,j+-1) * -0.25
                      +in(i+0,j+1) * 0.25
                      +in(i+0,j+2) * 0.125
                      +in(i+1,j+0) * 0.25
                      +in(i+2,j+0) * 0.125;
       }
     });
}

void star3(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=3; j<n-3; ++j) {
          out(i,j) += +in(i+-3,j+0) * -0.0555555555556
                      +in(i+-2,j+0) * -0.0833333333333
                      +in(i+-1,j+0) * -0.166666666667
                      +in(i+0,j+-3) * -0.0555555555556
                      +in(i+0,j+-2) * -0.0833333333333
                      +in(i+0,j+-1) * -0.166666666667
                      +in(i+0,j+1) * 0.166666666667
                      +in(i+0,j+2) * 0.0833333333333
                      +in(i+0,j+3) * 0.0555555555556
                      +in(i+1,j+0) * 0.166666666667
                      +in(i+2,j+0) * 0.0833333333333
                      +in(i+3,j+0) * 0.0555555555556;
       }
     });
}

void star4(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=4; j<n-4; ++j) {
          out(i,j) += +in(i+-4,j+0) * -0.03125
                      +in(i+-3,j+0) * -0.0416666666667
                      +in(i+-2,j+0) * -0.0625
                      +in(i+-1,j+0) * -0.125
                      +in(i+0,j+-4) * -0.03125
                      +in(i+0,j+-3) * -0.0416666666667
                      +in(i+0,j+-2) * -0.0625
                      +in(i+0,j+-1) * -0.125
                      +in(i+0,j+1) * 0.125
                      +in(i+0,j+2) * 0.0625
                      +in(i+0,j+3) * 0.0416666666667
                      +in(i+0,j+4) * 0.03125
                      +in(i+1,j+0) * 0.125
                      +in(i+2,j+0) * 0.0625
                      +in(i+3,j+0) * 0.0416666666667
                      +in(i+4,j+0) * 0.03125;
       }
     });
}

void star5(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=5; j<n-5; ++j) {
          out(i,j) += +in(i+-5,j+0) * -0.02
                      +in(i+-4,j+0) * -0.025
                      +in(i+-3,j+0) * -0.0333333333333
                      +in(i+-2,j+0) * -0.05
                      +in(i+-1,j+0) * -0.1
                      +in(i+0,j+-5) * -0.02
                      +in(i+0,j+-4) * -0.025
                      +in(i+0,j+-3) * -0.0333333333333
                      +in(i+0,j+-2) * -0.05
                      +in(i+0,j+-1) * -0.1
                      +in(i+0,j+1) * 0.1
                      +in(i+0,j+2) * 0.05
                      +in(i+0,j+3) * 0.0333333333333
                      +in(i+0,j+4) * 0.025
                      +in(i+0,j+5) * 0.02
                      +in(i+1,j+0) * 0.1
                      +in(i+2,j+0) * 0.05
                      +in(i+3,j+0) * 0.0333333333333
                      +in(i+4,j+0) * 0.025
                      +in(i+5,j+0) * 0.02;
       }
     });
}

void star6(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=6; j<n-6; ++j) {
          out(i,j) += +in(i+-6,j+0) * -0.0138888888889
                      +in(i+-5,j+0) * -0.0166666666667
                      +in(i+-4,j+0) * -0.0208333333333
                      +in(i+-3,j+0) * -0.0277777777778
                      +in(i+-2,j+0) * -0.0416666666667
                      +in(i+-1,j+0) * -0.0833333333333
                      +in(i+0,j+-6) * -0.0138888888889
                      +in(i+0,j+-5) * -0.0166666666667
                      +in(i+0,j+-4) * -0.0208333333333
                      +in(i+0,j+-3) * -0.0277777777778
                      +in(i+0,j+-2) * -0.0416666666667
                      +in(i+0,j+-1) * -0.0833333333333
                      +in(i+0,j+1) * 0.0833333333333
                      +in(i+0,j+2) * 0.0416666666667
                      +in(i+0,j+3) * 0.0277777777778
                      +in(i+0,j+4) * 0.0208333333333
                      +in(i+0,j+5) * 0.0166666666667
                      +in(i+0,j+6) * 0.0138888888889
                      +in(i+1,j+0) * 0.0833333333333
                      +in(i+2,j+0) * 0.0416666666667
                      +in(i+3,j+0) * 0.0277777777778
                      +in(i+4,j+0) * 0.0208333333333
                      +in(i+5,j+0) * 0.0166666666667
                      +in(i+6,j+0) * 0.0138888888889;
       }
     });
}

void star7(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=7; j<n-7; ++j) {
          out(i,j) += +in(i+-7,j+0) * -0.0102040816327
                      +in(i+-6,j+0) * -0.0119047619048
                      +in(i+-5,j+0) * -0.0142857142857
                      +in(i+-4,j+0) * -0.0178571428571
                      +in(i+-3,j+0) * -0.0238095238095
                      +in(i+-2,j+0) * -0.0357142857143
                      +in(i+-1,j+0) * -0.0714285714286
                      +in(i+0,j+-7) * -0.0102040816327
                      +in(i+0,j+-6) * -0.0119047619048
                      +in(i+0,j+-5) * -0.0142857142857
                      +in(i+0,j+-4) * -0.0178571428571
                      +in(i+0,j+-3) * -0.0238095238095
                      +in(i+0,j+-2) * -0.0357142857143
                      +in(i+0,j+-1) * -0.0714285714286
                      +in(i+0,j+1) * 0.0714285714286
                      +in(i+0,j+2) * 0.0357142857143
                      +in(i+0,j+3) * 0.0238095238095
                      +in(i+0,j+4) * 0.0178571428571
                      +in(i+0,j+5) * 0.0142857142857
                      +in(i+0,j+6) * 0.0119047619048
                      +in(i+0,j+7) * 0.0102040816327
                      +in(i+1,j+0) * 0.0714285714286
                      +in(i+2,j+0) * 0.0357142857143
                      +in(i+3,j+0) * 0.0238095238095
                      +in(i+4,j+0) * 0.0178571428571
                      +in(i+5,j+0) * 0.0142857142857
                      +in(i+6,j+0) * 0.0119047619048
                      +in(i+7,j+0) * 0.0102040816327;
       }
     });
}

void star8(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=8; j<n-8; ++j) {
          out(i,j) += +in(i+-8,j+0) * -0.0078125
                      +in(i+-7,j+0) * -0.00892857142857
                      +in(i+-6,j+0) * -0.0104166666667
                      +in(i+-5,j+0) * -0.0125
                      +in(i+-4,j+0) * -0.015625
                      +in(i+-3,j+0) * -0.0208333333333
                      +in(i+-2,j+0) * -0.03125
                      +in(i+-1,j+0) * -0.0625
                      +in(i+0,j+-8) * -0.0078125
                      +in(i+0,j+-7) * -0.00892857142857
                      +in(i+0,j+-6) * -0.0104166666667
                      +in(i+0,j+-5) * -0.0125
                      +in(i+0,j+-4) * -0.015625
                      +in(i+0,j+-3) * -0.0208333333333
                      +in(i+0,j+-2) * -0.03125
                      +in(i+0,j+-1) * -0.0625
                      +in(i+0,j+1) * 0.0625
                      +in(i+0,j+2) * 0.03125
                      +in(i+0,j+3) * 0.0208333333333
                      +in(i+0,j+4) * 0.015625
                      +in(i+0,j+5) * 0.0125
                      +in(i+0,j+6) * 0.0104166666667
                      +in(i+0,j+7) * 0.00892857142857
                      +in(i+0,j+8) * 0.0078125
                      +in(i+1,j+0) * 0.0625
                      +in(i+2,j+0) * 0.03125
                      +in(i+3,j+0) * 0.0208333333333
                      +in(i+4,j+0) * 0.015625
                      +in(i+5,j+0) * 0.0125
                      +in(i+6,j+0) * 0.0104166666667
                      +in(i+7,j+0) * 0.00892857142857
                      +in(i+8,j+0) * 0.0078125;
       }
     });
}

void star9(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=9; j<n-9; ++j) {
          out(i,j) += +in(i+-9,j+0) * -0.00617283950617
                      +in(i+-8,j+0) * -0.00694444444444
                      +in(i+-7,j+0) * -0.00793650793651
                      +in(i+-6,j+0) * -0.00925925925926
                      +in(i+-5,j+0) * -0.0111111111111
                      +in(i+-4,j+0) * -0.0138888888889
                      +in(i+-3,j+0) * -0.0185185185185
                      +in(i+-2,j+0) * -0.0277777777778
                      +in(i+-1,j+0) * -0.0555555555556
                      +in(i+0,j+-9) * -0.00617283950617
                      +in(i+0,j+-8) * -0.00694444444444
                      +in(i+0,j+-7) * -0.00793650793651
                      +in(i+0,j+-6) * -0.00925925925926
                      +in(i+0,j+-5) * -0.0111111111111
                      +in(i+0,j+-4) * -0.0138888888889
                      +in(i+0,j+-3) * -0.0185185185185
                      +in(i+0,j+-2) * -0.0277777777778
                      +in(i+0,j+-1) * -0.0555555555556
                      +in(i+0,j+1) * 0.0555555555556
                      +in(i+0,j+2) * 0.0277777777778
                      +in(i+0,j+3) * 0.0185185185185
                      +in(i+0,j+4) * 0.0138888888889
                      +in(i+0,j+5) * 0.0111111111111
                      +in(i+0,j+6) * 0.00925925925926
                      +in(i+0,j+7) * 0.00793650793651
                      +in(i+0,j+8) * 0.00694444444444
                      +in(i+0,j+9) * 0.00617283950617
                      +in(i+1,j+0) * 0.0555555555556
                      +in(i+2,j+0) * 0.0277777777778
                      +in(i+3,j+0) * 0.0185185185185
                      +in(i+4,j+0) * 0.0138888888889
                      +in(i+5,j+0) * 0.0111111111111
                      +in(i+6,j+0) * 0.00925925925926
                      +in(i+7,j+0) * 0.00793650793651
                      +in(i+8,j+0) * 0.00694444444444
                      +in(i+9,j+0) * 0.00617283950617;
       }
     });
}

void grid1(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=1; j<n-1; ++j) {
          out(i,j) += +in(i+-1,j+-1) * -0.25
                      +in(i+-1,j+0) * -0.25
                      +in(i+0,j+-1) * -0.25
                      +in(i+0,j+1) * 0.25
                      +in(i+1,j+0) * 0.25
                      +in(i+1,j+1) * 0.25
                      ;
       }
     });
}

void grid2(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=2; j<n-2; ++j) {
          out(i,j) += +in(i+-2,j+-2) * -0.0625
                      +in(i+-2,j+-1) * -0.0208333333333
                      +in(i+-2,j+0) * -0.0208333333333
                      +in(i+-2,j+1) * -0.0208333333333
                      +in(i+-1,j+-2) * -0.0208333333333
                      +in(i+-1,j+-1) * -0.125
                      +in(i+-1,j+0) * -0.125
                      +in(i+-1,j+2) * 0.0208333333333
                      +in(i+0,j+-2) * -0.0208333333333
                      +in(i+0,j+-1) * -0.125
                      +in(i+0,j+1) * 0.125
                      +in(i+0,j+2) * 0.0208333333333
                      +in(i+1,j+-2) * -0.0208333333333
                      +in(i+1,j+0) * 0.125
                      +in(i+1,j+1) * 0.125
                      +in(i+1,j+2) * 0.0208333333333
                      +in(i+2,j+-1) * 0.0208333333333
                      +in(i+2,j+0) * 0.0208333333333
                      +in(i+2,j+1) * 0.0208333333333
                      +in(i+2,j+2) * 0.0625
                      ;
       }
     });
}

void grid3(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=3; j<n-3; ++j) {
          out(i,j) += +in(i+-3,j+-3) * -0.0277777777778
                      +in(i+-3,j+-2) * -0.00555555555556
                      +in(i+-3,j+-1) * -0.00555555555556
                      +in(i+-3,j+0) * -0.00555555555556
                      +in(i+-3,j+1) * -0.00555555555556
                      +in(i+-3,j+2) * -0.00555555555556
                      +in(i+-2,j+-3) * -0.00555555555556
                      +in(i+-2,j+-2) * -0.0416666666667
                      +in(i+-2,j+-1) * -0.0138888888889
                      +in(i+-2,j+0) * -0.0138888888889
                      +in(i+-2,j+1) * -0.0138888888889
                      +in(i+-2,j+3) * 0.00555555555556
                      +in(i+-1,j+-3) * -0.00555555555556
                      +in(i+-1,j+-2) * -0.0138888888889
                      +in(i+-1,j+-1) * -0.0833333333333
                      +in(i+-1,j+0) * -0.0833333333333
                      +in(i+-1,j+2) * 0.0138888888889
                      +in(i+-1,j+3) * 0.00555555555556
                      +in(i+0,j+-3) * -0.00555555555556
                      +in(i+0,j+-2) * -0.0138888888889
                      +in(i+0,j+-1) * -0.0833333333333
                      +in(i+0,j+1) * 0.0833333333333
                      +in(i+0,j+2) * 0.0138888888889
                      +in(i+0,j+3) * 0.00555555555556
                      +in(i+1,j+-3) * -0.00555555555556
                      +in(i+1,j+-2) * -0.0138888888889
                      +in(i+1,j+0) * 0.0833333333333
                      +in(i+1,j+1) * 0.0833333333333
                      +in(i+1,j+2) * 0.0138888888889
                      +in(i+1,j+3) * 0.00555555555556
                      +in(i+2,j+-3) * -0.00555555555556
                      +in(i+2,j+-1) * 0.0138888888889
                      +in(i+2,j+0) * 0.0138888888889
                      +in(i+2,j+1) * 0.0138888888889
                      +in(i+2,j+2) * 0.0416666666667
                      +in(i+2,j+3) * 0.00555555555556
                      +in(i+3,j+-2) * 0.00555555555556
                      +in(i+3,j+-1) * 0.00555555555556
                      +in(i+3,j+0) * 0.00555555555556
                      +in(i+3,j+1) * 0.00555555555556
                      +in(i+3,j+2) * 0.00555555555556
                      +in(i+3,j+3) * 0.0277777777778
                      ;
       }
     });
}

void grid4(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=4; j<n-4; ++j) {
          out(i,j) += +in(i+-4,j+-4) * -0.015625
                      +in(i+-4,j+-3) * -0.00223214285714
                      +in(i+-4,j+-2) * -0.00223214285714
                      +in(i+-4,j+-1) * -0.00223214285714
                      +in(i+-4,j+0) * -0.00223214285714
                      +in(i+-4,j+1) * -0.00223214285714
                      +in(i+-4,j+2) * -0.00223214285714
                      +in(i+-4,j+3) * -0.00223214285714
                      +in(i+-3,j+-4) * -0.00223214285714
                      +in(i+-3,j+-3) * -0.0208333333333
                      +in(i+-3,j+-2) * -0.00416666666667
                      +in(i+-3,j+-1) * -0.00416666666667
                      +in(i+-3,j+0) * -0.00416666666667
                      +in(i+-3,j+1) * -0.00416666666667
                      +in(i+-3,j+2) * -0.00416666666667
                      +in(i+-3,j+4) * 0.00223214285714
                      +in(i+-2,j+-4) * -0.00223214285714
                      +in(i+-2,j+-3) * -0.00416666666667
                      +in(i+-2,j+-2) * -0.03125
                      +in(i+-2,j+-1) * -0.0104166666667
                      +in(i+-2,j+0) * -0.0104166666667
                      +in(i+-2,j+1) * -0.0104166666667
                      +in(i+-2,j+3) * 0.00416666666667
                      +in(i+-2,j+4) * 0.00223214285714
                      +in(i+-1,j+-4) * -0.00223214285714
                      +in(i+-1,j+-3) * -0.00416666666667
                      +in(i+-1,j+-2) * -0.0104166666667
                      +in(i+-1,j+-1) * -0.0625
                      +in(i+-1,j+0) * -0.0625
                      +in(i+-1,j+2) * 0.0104166666667
                      +in(i+-1,j+3) * 0.00416666666667
                      +in(i+-1,j+4) * 0.00223214285714
                      +in(i+0,j+-4) * -0.00223214285714
                      +in(i+0,j+-3) * -0.00416666666667
                      +in(i+0,j+-2) * -0.0104166666667
                      +in(i+0,j+-1) * -0.0625
                      +in(i+0,j+1) * 0.0625
                      +in(i+0,j+2) * 0.0104166666667
                      +in(i+0,j+3) * 0.00416666666667
                      +in(i+0,j+4) * 0.00223214285714
                      +in(i+1,j+-4) * -0.00223214285714
                      +in(i+1,j+-3) * -0.00416666666667
                      +in(i+1,j+-2) * -0.0104166666667
                      +in(i+1,j+0) * 0.0625
                      +in(i+1,j+1) * 0.0625
                      +in(i+1,j+2) * 0.0104166666667
                      +in(i+1,j+3) * 0.00416666666667
                      +in(i+1,j+4) * 0.00223214285714
                      +in(i+2,j+-4) * -0.00223214285714
                      +in(i+2,j+-3) * -0.00416666666667
                      +in(i+2,j+-1) * 0.0104166666667
                      +in(i+2,j+0) * 0.0104166666667
                      +in(i+2,j+1) * 0.0104166666667
                      +in(i+2,j+2) * 0.03125
                      +in(i+2,j+3) * 0.00416666666667
                      +in(i+2,j+4) * 0.00223214285714
                      +in(i+3,j+-4) * -0.00223214285714
                      +in(i+3,j+-2) * 0.00416666666667
                      +in(i+3,j+-1) * 0.00416666666667
                      +in(i+3,j+0) * 0.00416666666667
                      +in(i+3,j+1) * 0.00416666666667
                      +in(i+3,j+2) * 0.00416666666667
                      +in(i+3,j+3) * 0.0208333333333
                      +in(i+3,j+4) * 0.00223214285714
                      +in(i+4,j+-3) * 0.00223214285714
                      +in(i+4,j+-2) * 0.00223214285714
                      +in(i+4,j+-1) * 0.00223214285714
                      +in(i+4,j+0) * 0.00223214285714
                      +in(i+4,j+1) * 0.00223214285714
                      +in(i+4,j+2) * 0.00223214285714
                      +in(i+4,j+3) * 0.00223214285714
                      +in(i+4,j+4) * 0.015625
                      ;
       }
     });
}

void grid5(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=5; j<n-5; ++j) {
          out(i,j) += +in(i+-5,j+-5) * -0.01
                      +in(i+-5,j+-4) * -0.00111111111111
                      +in(i+-5,j+-3) * -0.00111111111111
                      +in(i+-5,j+-2) * -0.00111111111111
                      +in(i+-5,j+-1) * -0.00111111111111
                      +in(i+-5,j+0) * -0.00111111111111
                      +in(i+-5,j+1) * -0.00111111111111
                      +in(i+-5,j+2) * -0.00111111111111
                      +in(i+-5,j+3) * -0.00111111111111
                      +in(i+-5,j+4) * -0.00111111111111
                      +in(i+-4,j+-5) * -0.00111111111111
                      +in(i+-4,j+-4) * -0.0125
                      +in(i+-4,j+-3) * -0.00178571428571
                      +in(i+-4,j+-2) * -0.00178571428571
                      +in(i+-4,j+-1) * -0.00178571428571
                      +in(i+-4,j+0) * -0.00178571428571
                      +in(i+-4,j+1) * -0.00178571428571
                      +in(i+-4,j+2) * -0.00178571428571
                      +in(i+-4,j+3) * -0.00178571428571
                      +in(i+-4,j+5) * 0.00111111111111
                      +in(i+-3,j+-5) * -0.00111111111111
                      +in(i+-3,j+-4) * -0.00178571428571
                      +in(i+-3,j+-3) * -0.0166666666667
                      +in(i+-3,j+-2) * -0.00333333333333
                      +in(i+-3,j+-1) * -0.00333333333333
                      +in(i+-3,j+0) * -0.00333333333333
                      +in(i+-3,j+1) * -0.00333333333333
                      +in(i+-3,j+2) * -0.00333333333333
                      +in(i+-3,j+4) * 0.00178571428571
                      +in(i+-3,j+5) * 0.00111111111111
                      +in(i+-2,j+-5) * -0.00111111111111
                      +in(i+-2,j+-4) * -0.00178571428571
                      +in(i+-2,j+-3) * -0.00333333333333
                      +in(i+-2,j+-2) * -0.025
                      +in(i+-2,j+-1) * -0.00833333333333
                      +in(i+-2,j+0) * -0.00833333333333
                      +in(i+-2,j+1) * -0.00833333333333
                      +in(i+-2,j+3) * 0.00333333333333
                      +in(i+-2,j+4) * 0.00178571428571
                      +in(i+-2,j+5) * 0.00111111111111
                      +in(i+-1,j+-5) * -0.00111111111111
                      +in(i+-1,j+-4) * -0.00178571428571
                      +in(i+-1,j+-3) * -0.00333333333333
                      +in(i+-1,j+-2) * -0.00833333333333
                      +in(i+-1,j+-1) * -0.05
                      +in(i+-1,j+0) * -0.05
                      +in(i+-1,j+2) * 0.00833333333333
                      +in(i+-1,j+3) * 0.00333333333333
                      +in(i+-1,j+4) * 0.00178571428571
                      +in(i+-1,j+5) * 0.00111111111111
                      +in(i+0,j+-5) * -0.00111111111111
                      +in(i+0,j+-4) * -0.00178571428571
                      +in(i+0,j+-3) * -0.00333333333333
                      +in(i+0,j+-2) * -0.00833333333333
                      +in(i+0,j+-1) * -0.05
                      +in(i+0,j+1) * 0.05
                      +in(i+0,j+2) * 0.00833333333333
                      +in(i+0,j+3) * 0.00333333333333
                      +in(i+0,j+4) * 0.00178571428571
                      +in(i+0,j+5) * 0.00111111111111
                      +in(i+1,j+-5) * -0.00111111111111
                      +in(i+1,j+-4) * -0.00178571428571
                      +in(i+1,j+-3) * -0.00333333333333
                      +in(i+1,j+-2) * -0.00833333333333
                      +in(i+1,j+0) * 0.05
                      +in(i+1,j+1) * 0.05
                      +in(i+1,j+2) * 0.00833333333333
                      +in(i+1,j+3) * 0.00333333333333
                      +in(i+1,j+4) * 0.00178571428571
                      +in(i+1,j+5) * 0.00111111111111
                      +in(i+2,j+-5) * -0.00111111111111
                      +in(i+2,j+-4) * -0.00178571428571
                      +in(i+2,j+-3) * -0.00333333333333
                      +in(i+2,j+-1) * 0.00833333333333
                      +in(i+2,j+0) * 0.00833333333333
                      +in(i+2,j+1) * 0.00833333333333
                      +in(i+2,j+2) * 0.025
                      +in(i+2,j+3) * 0.00333333333333
                      +in(i+2,j+4) * 0.00178571428571
                      +in(i+2,j+5) * 0.00111111111111
                      +in(i+3,j+-5) * -0.00111111111111
                      +in(i+3,j+-4) * -0.00178571428571
                      +in(i+3,j+-2) * 0.00333333333333
                      +in(i+3,j+-1) * 0.00333333333333
                      +in(i+3,j+0) * 0.00333333333333
                      +in(i+3,j+1) * 0.00333333333333
                      +in(i+3,j+2) * 0.00333333333333
                      +in(i+3,j+3) * 0.0166666666667
                      +in(i+3,j+4) * 0.00178571428571
                      +in(i+3,j+5) * 0.00111111111111
                      +in(i+4,j+-5) * -0.00111111111111
                      +in(i+4,j+-3) * 0.00178571428571
                      +in(i+4,j+-2) * 0.00178571428571
                      +in(i+4,j+-1) * 0.00178571428571
                      +in(i+4,j+0) * 0.00178571428571
                      +in(i+4,j+1) * 0.00178571428571
                      +in(i+4,j+2) * 0.00178571428571
                      +in(i+4,j+3) * 0.00178571428571
                      +in(i+4,j+4) * 0.0125
                      +in(i+4,j+5) * 0.00111111111111
                      +in(i+5,j+-4) * 0.00111111111111
                      +in(i+5,j+-3) * 0.00111111111111
                      +in(i+5,j+-2) * 0.00111111111111
                      +in(i+5,j+-1) * 0.00111111111111
                      +in(i+5,j+0) * 0.00111111111111
                      +in(i+5,j+1) * 0.00111111111111
                      +in(i+5,j+2) * 0.00111111111111
                      +in(i+5,j+3) * 0.00111111111111
                      +in(i+5,j+4) * 0.00111111111111
                      +in(i+5,j+5) * 0.01
                      ;
       }
     });
}

void grid6(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=6; j<n-6; ++j) {
          out(i,j) += +in(i+-6,j+-6) * -0.00694444444444
                      +in(i+-6,j+-5) * -0.000631313131313
                      +in(i+-6,j+-4) * -0.000631313131313
                      +in(i+-6,j+-3) * -0.000631313131313
                      +in(i+-6,j+-2) * -0.000631313131313
                      +in(i+-6,j+-1) * -0.000631313131313
                      +in(i+-6,j+0) * -0.000631313131313
                      +in(i+-6,j+1) * -0.000631313131313
                      +in(i+-6,j+2) * -0.000631313131313
                      +in(i+-6,j+3) * -0.000631313131313
                      +in(i+-6,j+4) * -0.000631313131313
                      +in(i+-6,j+5) * -0.000631313131313
                      +in(i+-5,j+-6) * -0.000631313131313
                      +in(i+-5,j+-5) * -0.00833333333333
                      +in(i+-5,j+-4) * -0.000925925925926
                      +in(i+-5,j+-3) * -0.000925925925926
                      +in(i+-5,j+-2) * -0.000925925925926
                      +in(i+-5,j+-1) * -0.000925925925926
                      +in(i+-5,j+0) * -0.000925925925926
                      +in(i+-5,j+1) * -0.000925925925926
                      +in(i+-5,j+2) * -0.000925925925926
                      +in(i+-5,j+3) * -0.000925925925926
                      +in(i+-5,j+4) * -0.000925925925926
                      +in(i+-5,j+6) * 0.000631313131313
                      +in(i+-4,j+-6) * -0.000631313131313
                      +in(i+-4,j+-5) * -0.000925925925926
                      +in(i+-4,j+-4) * -0.0104166666667
                      +in(i+-4,j+-3) * -0.0014880952381
                      +in(i+-4,j+-2) * -0.0014880952381
                      +in(i+-4,j+-1) * -0.0014880952381
                      +in(i+-4,j+0) * -0.0014880952381
                      +in(i+-4,j+1) * -0.0014880952381
                      +in(i+-4,j+2) * -0.0014880952381
                      +in(i+-4,j+3) * -0.0014880952381
                      +in(i+-4,j+5) * 0.000925925925926
                      +in(i+-4,j+6) * 0.000631313131313
                      +in(i+-3,j+-6) * -0.000631313131313
                      +in(i+-3,j+-5) * -0.000925925925926
                      +in(i+-3,j+-4) * -0.0014880952381
                      +in(i+-3,j+-3) * -0.0138888888889
                      +in(i+-3,j+-2) * -0.00277777777778
                      +in(i+-3,j+-1) * -0.00277777777778
                      +in(i+-3,j+0) * -0.00277777777778
                      +in(i+-3,j+1) * -0.00277777777778
                      +in(i+-3,j+2) * -0.00277777777778
                      +in(i+-3,j+4) * 0.0014880952381
                      +in(i+-3,j+5) * 0.000925925925926
                      +in(i+-3,j+6) * 0.000631313131313
                      +in(i+-2,j+-6) * -0.000631313131313
                      +in(i+-2,j+-5) * -0.000925925925926
                      +in(i+-2,j+-4) * -0.0014880952381
                      +in(i+-2,j+-3) * -0.00277777777778
                      +in(i+-2,j+-2) * -0.0208333333333
                      +in(i+-2,j+-1) * -0.00694444444444
                      +in(i+-2,j+0) * -0.00694444444444
                      +in(i+-2,j+1) * -0.00694444444444
                      +in(i+-2,j+3) * 0.00277777777778
                      +in(i+-2,j+4) * 0.0014880952381
                      +in(i+-2,j+5) * 0.000925925925926
                      +in(i+-2,j+6) * 0.000631313131313
                      +in(i+-1,j+-6) * -0.000631313131313
                      +in(i+-1,j+-5) * -0.000925925925926
                      +in(i+-1,j+-4) * -0.0014880952381
                      +in(i+-1,j+-3) * -0.00277777777778
                      +in(i+-1,j+-2) * -0.00694444444444
                      +in(i+-1,j+-1) * -0.0416666666667
                      +in(i+-1,j+0) * -0.0416666666667
                      +in(i+-1,j+2) * 0.00694444444444
                      +in(i+-1,j+3) * 0.00277777777778
                      +in(i+-1,j+4) * 0.0014880952381
                      +in(i+-1,j+5) * 0.000925925925926
                      +in(i+-1,j+6) * 0.000631313131313
                      +in(i+0,j+-6) * -0.000631313131313
                      +in(i+0,j+-5) * -0.000925925925926
                      +in(i+0,j+-4) * -0.0014880952381
                      +in(i+0,j+-3) * -0.00277777777778
                      +in(i+0,j+-2) * -0.00694444444444
                      +in(i+0,j+-1) * -0.0416666666667
                      +in(i+0,j+1) * 0.0416666666667
                      +in(i+0,j+2) * 0.00694444444444
                      +in(i+0,j+3) * 0.00277777777778
                      +in(i+0,j+4) * 0.0014880952381
                      +in(i+0,j+5) * 0.000925925925926
                      +in(i+0,j+6) * 0.000631313131313
                      +in(i+1,j+-6) * -0.000631313131313
                      +in(i+1,j+-5) * -0.000925925925926
                      +in(i+1,j+-4) * -0.0014880952381
                      +in(i+1,j+-3) * -0.00277777777778
                      +in(i+1,j+-2) * -0.00694444444444
                      +in(i+1,j+0) * 0.0416666666667
                      +in(i+1,j+1) * 0.0416666666667
                      +in(i+1,j+2) * 0.00694444444444
                      +in(i+1,j+3) * 0.00277777777778
                      +in(i+1,j+4) * 0.0014880952381
                      +in(i+1,j+5) * 0.000925925925926
                      +in(i+1,j+6) * 0.000631313131313
                      +in(i+2,j+-6) * -0.000631313131313
                      +in(i+2,j+-5) * -0.000925925925926
                      +in(i+2,j+-4) * -0.0014880952381
                      +in(i+2,j+-3) * -0.00277777777778
                      +in(i+2,j+-1) * 0.00694444444444
                      +in(i+2,j+0) * 0.00694444444444
                      +in(i+2,j+1) * 0.00694444444444
                      +in(i+2,j+2) * 0.0208333333333
                      +in(i+2,j+3) * 0.00277777777778
                      +in(i+2,j+4) * 0.0014880952381
                      +in(i+2,j+5) * 0.000925925925926
                      +in(i+2,j+6) * 0.000631313131313
                      +in(i+3,j+-6) * -0.000631313131313
                      +in(i+3,j+-5) * -0.000925925925926
                      +in(i+3,j+-4) * -0.0014880952381
                      +in(i+3,j+-2) * 0.00277777777778
                      +in(i+3,j+-1) * 0.00277777777778
                      +in(i+3,j+0) * 0.00277777777778
                      +in(i+3,j+1) * 0.00277777777778
                      +in(i+3,j+2) * 0.00277777777778
                      +in(i+3,j+3) * 0.0138888888889
                      +in(i+3,j+4) * 0.0014880952381
                      +in(i+3,j+5) * 0.000925925925926
                      +in(i+3,j+6) * 0.000631313131313
                      +in(i+4,j+-6) * -0.000631313131313
                      +in(i+4,j+-5) * -0.000925925925926
                      +in(i+4,j+-3) * 0.0014880952381
                      +in(i+4,j+-2) * 0.0014880952381
                      +in(i+4,j+-1) * 0.0014880952381
                      +in(i+4,j+0) * 0.0014880952381
                      +in(i+4,j+1) * 0.0014880952381
                      +in(i+4,j+2) * 0.0014880952381
                      +in(i+4,j+3) * 0.0014880952381
                      +in(i+4,j+4) * 0.0104166666667
                      +in(i+4,j+5) * 0.000925925925926
                      +in(i+4,j+6) * 0.000631313131313
                      +in(i+5,j+-6) * -0.000631313131313
                      +in(i+5,j+-4) * 0.000925925925926
                      +in(i+5,j+-3) * 0.000925925925926
                      +in(i+5,j+-2) * 0.000925925925926
                      +in(i+5,j+-1) * 0.000925925925926
                      +in(i+5,j+0) * 0.000925925925926
                      +in(i+5,j+1) * 0.000925925925926
                      +in(i+5,j+2) * 0.000925925925926
                      +in(i+5,j+3) * 0.000925925925926
                      +in(i+5,j+4) * 0.000925925925926
                      +in(i+5,j+5) * 0.00833333333333
                      +in(i+5,j+6) * 0.000631313131313
                      +in(i+6,j+-5) * 0.000631313131313
                      +in(i+6,j+-4) * 0.000631313131313
                      +in(i+6,j+-3) * 0.000631313131313
                      +in(i+6,j+-2) * 0.000631313131313
                      +in(i+6,j+-1) * 0.000631313131313
                      +in(i+6,j+0) * 0.000631313131313
                      +in(i+6,j+1) * 0.000631313131313
                      +in(i+6,j+2) * 0.000631313131313
                      +in(i+6,j+3) * 0.000631313131313
                      +in(i+6,j+4) * 0.000631313131313
                      +in(i+6,j+5) * 0.000631313131313
                      +in(i+6,j+6) * 0.00694444444444
                      ;
       }
     });
}

void grid7(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=7; j<n-7; ++j) {
          out(i,j) += +in(i+-7,j+-7) * -0.00510204081633
                      +in(i+-7,j+-6) * -0.000392464678179
                      +in(i+-7,j+-5) * -0.000392464678179
                      +in(i+-7,j+-4) * -0.000392464678179
                      +in(i+-7,j+-3) * -0.000392464678179
                      +in(i+-7,j+-2) * -0.000392464678179
                      +in(i+-7,j+-1) * -0.000392464678179
                      +in(i+-7,j+0) * -0.000392464678179
                      +in(i+-7,j+1) * -0.000392464678179
                      +in(i+-7,j+2) * -0.000392464678179
                      +in(i+-7,j+3) * -0.000392464678179
                      +in(i+-7,j+4) * -0.000392464678179
                      +in(i+-7,j+5) * -0.000392464678179
                      +in(i+-7,j+6) * -0.000392464678179
                      +in(i+-6,j+-7) * -0.000392464678179
                      +in(i+-6,j+-6) * -0.00595238095238
                      +in(i+-6,j+-5) * -0.000541125541126
                      +in(i+-6,j+-4) * -0.000541125541126
                      +in(i+-6,j+-3) * -0.000541125541126
                      +in(i+-6,j+-2) * -0.000541125541126
                      +in(i+-6,j+-1) * -0.000541125541126
                      +in(i+-6,j+0) * -0.000541125541126
                      +in(i+-6,j+1) * -0.000541125541126
                      +in(i+-6,j+2) * -0.000541125541126
                      +in(i+-6,j+3) * -0.000541125541126
                      +in(i+-6,j+4) * -0.000541125541126
                      +in(i+-6,j+5) * -0.000541125541126
                      +in(i+-6,j+7) * 0.000392464678179
                      +in(i+-5,j+-7) * -0.000392464678179
                      +in(i+-5,j+-6) * -0.000541125541126
                      +in(i+-5,j+-5) * -0.00714285714286
                      +in(i+-5,j+-4) * -0.000793650793651
                      +in(i+-5,j+-3) * -0.000793650793651
                      +in(i+-5,j+-2) * -0.000793650793651
                      +in(i+-5,j+-1) * -0.000793650793651
                      +in(i+-5,j+0) * -0.000793650793651
                      +in(i+-5,j+1) * -0.000793650793651
                      +in(i+-5,j+2) * -0.000793650793651
                      +in(i+-5,j+3) * -0.000793650793651
                      +in(i+-5,j+4) * -0.000793650793651
                      +in(i+-5,j+6) * 0.000541125541126
                      +in(i+-5,j+7) * 0.000392464678179
                      +in(i+-4,j+-7) * -0.000392464678179
                      +in(i+-4,j+-6) * -0.000541125541126
                      +in(i+-4,j+-5) * -0.000793650793651
                      +in(i+-4,j+-4) * -0.00892857142857
                      +in(i+-4,j+-3) * -0.00127551020408
                      +in(i+-4,j+-2) * -0.00127551020408
                      +in(i+-4,j+-1) * -0.00127551020408
                      +in(i+-4,j+0) * -0.00127551020408
                      +in(i+-4,j+1) * -0.00127551020408
                      +in(i+-4,j+2) * -0.00127551020408
                      +in(i+-4,j+3) * -0.00127551020408
                      +in(i+-4,j+5) * 0.000793650793651
                      +in(i+-4,j+6) * 0.000541125541126
                      +in(i+-4,j+7) * 0.000392464678179
                      +in(i+-3,j+-7) * -0.000392464678179
                      +in(i+-3,j+-6) * -0.000541125541126
                      +in(i+-3,j+-5) * -0.000793650793651
                      +in(i+-3,j+-4) * -0.00127551020408
                      +in(i+-3,j+-3) * -0.0119047619048
                      +in(i+-3,j+-2) * -0.00238095238095
                      +in(i+-3,j+-1) * -0.00238095238095
                      +in(i+-3,j+0) * -0.00238095238095
                      +in(i+-3,j+1) * -0.00238095238095
                      +in(i+-3,j+2) * -0.00238095238095
                      +in(i+-3,j+4) * 0.00127551020408
                      +in(i+-3,j+5) * 0.000793650793651
                      +in(i+-3,j+6) * 0.000541125541126
                      +in(i+-3,j+7) * 0.000392464678179
                      +in(i+-2,j+-7) * -0.000392464678179
                      +in(i+-2,j+-6) * -0.000541125541126
                      +in(i+-2,j+-5) * -0.000793650793651
                      +in(i+-2,j+-4) * -0.00127551020408
                      +in(i+-2,j+-3) * -0.00238095238095
                      +in(i+-2,j+-2) * -0.0178571428571
                      +in(i+-2,j+-1) * -0.00595238095238
                      +in(i+-2,j+0) * -0.00595238095238
                      +in(i+-2,j+1) * -0.00595238095238
                      +in(i+-2,j+3) * 0.00238095238095
                      +in(i+-2,j+4) * 0.00127551020408
                      +in(i+-2,j+5) * 0.000793650793651
                      +in(i+-2,j+6) * 0.000541125541126
                      +in(i+-2,j+7) * 0.000392464678179
                      +in(i+-1,j+-7) * -0.000392464678179
                      +in(i+-1,j+-6) * -0.000541125541126
                      +in(i+-1,j+-5) * -0.000793650793651
                      +in(i+-1,j+-4) * -0.00127551020408
                      +in(i+-1,j+-3) * -0.00238095238095
                      +in(i+-1,j+-2) * -0.00595238095238
                      +in(i+-1,j+-1) * -0.0357142857143
                      +in(i+-1,j+0) * -0.0357142857143
                      +in(i+-1,j+2) * 0.00595238095238
                      +in(i+-1,j+3) * 0.00238095238095
                      +in(i+-1,j+4) * 0.00127551020408
                      +in(i+-1,j+5) * 0.000793650793651
                      +in(i+-1,j+6) * 0.000541125541126
                      +in(i+-1,j+7) * 0.000392464678179
                      +in(i+0,j+-7) * -0.000392464678179
                      +in(i+0,j+-6) * -0.000541125541126
                      +in(i+0,j+-5) * -0.000793650793651
                      +in(i+0,j+-4) * -0.00127551020408
                      +in(i+0,j+-3) * -0.00238095238095
                      +in(i+0,j+-2) * -0.00595238095238
                      +in(i+0,j+-1) * -0.0357142857143
                      +in(i+0,j+1) * 0.0357142857143
                      +in(i+0,j+2) * 0.00595238095238
                      +in(i+0,j+3) * 0.00238095238095
                      +in(i+0,j+4) * 0.00127551020408
                      +in(i+0,j+5) * 0.000793650793651
                      +in(i+0,j+6) * 0.000541125541126
                      +in(i+0,j+7) * 0.000392464678179
                      +in(i+1,j+-7) * -0.000392464678179
                      +in(i+1,j+-6) * -0.000541125541126
                      +in(i+1,j+-5) * -0.000793650793651
                      +in(i+1,j+-4) * -0.00127551020408
                      +in(i+1,j+-3) * -0.00238095238095
                      +in(i+1,j+-2) * -0.00595238095238
                      +in(i+1,j+0) * 0.0357142857143
                      +in(i+1,j+1) * 0.0357142857143
                      +in(i+1,j+2) * 0.00595238095238
                      +in(i+1,j+3) * 0.00238095238095
                      +in(i+1,j+4) * 0.00127551020408
                      +in(i+1,j+5) * 0.000793650793651
                      +in(i+1,j+6) * 0.000541125541126
                      +in(i+1,j+7) * 0.000392464678179
                      +in(i+2,j+-7) * -0.000392464678179
                      +in(i+2,j+-6) * -0.000541125541126
                      +in(i+2,j+-5) * -0.000793650793651
                      +in(i+2,j+-4) * -0.00127551020408
                      +in(i+2,j+-3) * -0.00238095238095
                      +in(i+2,j+-1) * 0.00595238095238
                      +in(i+2,j+0) * 0.00595238095238
                      +in(i+2,j+1) * 0.00595238095238
                      +in(i+2,j+2) * 0.0178571428571
                      +in(i+2,j+3) * 0.00238095238095
                      +in(i+2,j+4) * 0.00127551020408
                      +in(i+2,j+5) * 0.000793650793651
                      +in(i+2,j+6) * 0.000541125541126
                      +in(i+2,j+7) * 0.000392464678179
                      +in(i+3,j+-7) * -0.000392464678179
                      +in(i+3,j+-6) * -0.000541125541126
                      +in(i+3,j+-5) * -0.000793650793651
                      +in(i+3,j+-4) * -0.00127551020408
                      +in(i+3,j+-2) * 0.00238095238095
                      +in(i+3,j+-1) * 0.00238095238095
                      +in(i+3,j+0) * 0.00238095238095
                      +in(i+3,j+1) * 0.00238095238095
                      +in(i+3,j+2) * 0.00238095238095
                      +in(i+3,j+3) * 0.0119047619048
                      +in(i+3,j+4) * 0.00127551020408
                      +in(i+3,j+5) * 0.000793650793651
                      +in(i+3,j+6) * 0.000541125541126
                      +in(i+3,j+7) * 0.000392464678179
                      +in(i+4,j+-7) * -0.000392464678179
                      +in(i+4,j+-6) * -0.000541125541126
                      +in(i+4,j+-5) * -0.000793650793651
                      +in(i+4,j+-3) * 0.00127551020408
                      +in(i+4,j+-2) * 0.00127551020408
                      +in(i+4,j+-1) * 0.00127551020408
                      +in(i+4,j+0) * 0.00127551020408
                      +in(i+4,j+1) * 0.00127551020408
                      +in(i+4,j+2) * 0.00127551020408
                      +in(i+4,j+3) * 0.00127551020408
                      +in(i+4,j+4) * 0.00892857142857
                      +in(i+4,j+5) * 0.000793650793651
                      +in(i+4,j+6) * 0.000541125541126
                      +in(i+4,j+7) * 0.000392464678179
                      +in(i+5,j+-7) * -0.000392464678179
                      +in(i+5,j+-6) * -0.000541125541126
                      +in(i+5,j+-4) * 0.000793650793651
                      +in(i+5,j+-3) * 0.000793650793651
                      +in(i+5,j+-2) * 0.000793650793651
                      +in(i+5,j+-1) * 0.000793650793651
                      +in(i+5,j+0) * 0.000793650793651
                      +in(i+5,j+1) * 0.000793650793651
                      +in(i+5,j+2) * 0.000793650793651
                      +in(i+5,j+3) * 0.000793650793651
                      +in(i+5,j+4) * 0.000793650793651
                      +in(i+5,j+5) * 0.00714285714286
                      +in(i+5,j+6) * 0.000541125541126
                      +in(i+5,j+7) * 0.000392464678179
                      +in(i+6,j+-7) * -0.000392464678179
                      +in(i+6,j+-5) * 0.000541125541126
                      +in(i+6,j+-4) * 0.000541125541126
                      +in(i+6,j+-3) * 0.000541125541126
                      +in(i+6,j+-2) * 0.000541125541126
                      +in(i+6,j+-1) * 0.000541125541126
                      +in(i+6,j+0) * 0.000541125541126
                      +in(i+6,j+1) * 0.000541125541126
                      +in(i+6,j+2) * 0.000541125541126
                      +in(i+6,j+3) * 0.000541125541126
                      +in(i+6,j+4) * 0.000541125541126
                      +in(i+6,j+5) * 0.000541125541126
                      +in(i+6,j+6) * 0.00595238095238
                      +in(i+6,j+7) * 0.000392464678179
                      +in(i+7,j+-6) * 0.000392464678179
                      +in(i+7,j+-5) * 0.000392464678179
                      +in(i+7,j+-4) * 0.000392464678179
                      +in(i+7,j+-3) * 0.000392464678179
                      +in(i+7,j+-2) * 0.000392464678179
                      +in(i+7,j+-1) * 0.000392464678179
                      +in(i+7,j+0) * 0.000392464678179
                      +in(i+7,j+1) * 0.000392464678179
                      +in(i+7,j+2) * 0.000392464678179
                      +in(i+7,j+3) * 0.000392464678179
                      +in(i+7,j+4) * 0.000392464678179
                      +in(i+7,j+5) * 0.000392464678179
                      +in(i+7,j+6) * 0.000392464678179
                      +in(i+7,j+7) * 0.00510204081633
                      ;
       }
     });
}

void grid8(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=8; j<n-8; ++j) {
          out(i,j) += +in(i+-8,j+-8) * -0.00390625
                      +in(i+-8,j+-7) * -0.000260416666667
                      +in(i+-8,j+-6) * -0.000260416666667
                      +in(i+-8,j+-5) * -0.000260416666667
                      +in(i+-8,j+-4) * -0.000260416666667
                      +in(i+-8,j+-3) * -0.000260416666667
                      +in(i+-8,j+-2) * -0.000260416666667
                      +in(i+-8,j+-1) * -0.000260416666667
                      +in(i+-8,j+0) * -0.000260416666667
                      +in(i+-8,j+1) * -0.000260416666667
                      +in(i+-8,j+2) * -0.000260416666667
                      +in(i+-8,j+3) * -0.000260416666667
                      +in(i+-8,j+4) * -0.000260416666667
                      +in(i+-8,j+5) * -0.000260416666667
                      +in(i+-8,j+6) * -0.000260416666667
                      +in(i+-8,j+7) * -0.000260416666667
                      +in(i+-7,j+-8) * -0.000260416666667
                      +in(i+-7,j+-7) * -0.00446428571429
                      +in(i+-7,j+-6) * -0.000343406593407
                      +in(i+-7,j+-5) * -0.000343406593407
                      +in(i+-7,j+-4) * -0.000343406593407
                      +in(i+-7,j+-3) * -0.000343406593407
                      +in(i+-7,j+-2) * -0.000343406593407
                      +in(i+-7,j+-1) * -0.000343406593407
                      +in(i+-7,j+0) * -0.000343406593407
                      +in(i+-7,j+1) * -0.000343406593407
                      +in(i+-7,j+2) * -0.000343406593407
                      +in(i+-7,j+3) * -0.000343406593407
                      +in(i+-7,j+4) * -0.000343406593407
                      +in(i+-7,j+5) * -0.000343406593407
                      +in(i+-7,j+6) * -0.000343406593407
                      +in(i+-7,j+8) * 0.000260416666667
                      +in(i+-6,j+-8) * -0.000260416666667
                      +in(i+-6,j+-7) * -0.000343406593407
                      +in(i+-6,j+-6) * -0.00520833333333
                      +in(i+-6,j+-5) * -0.000473484848485
                      +in(i+-6,j+-4) * -0.000473484848485
                      +in(i+-6,j+-3) * -0.000473484848485
                      +in(i+-6,j+-2) * -0.000473484848485
                      +in(i+-6,j+-1) * -0.000473484848485
                      +in(i+-6,j+0) * -0.000473484848485
                      +in(i+-6,j+1) * -0.000473484848485
                      +in(i+-6,j+2) * -0.000473484848485
                      +in(i+-6,j+3) * -0.000473484848485
                      +in(i+-6,j+4) * -0.000473484848485
                      +in(i+-6,j+5) * -0.000473484848485
                      +in(i+-6,j+7) * 0.000343406593407
                      +in(i+-6,j+8) * 0.000260416666667
                      +in(i+-5,j+-8) * -0.000260416666667
                      +in(i+-5,j+-7) * -0.000343406593407
                      +in(i+-5,j+-6) * -0.000473484848485
                      +in(i+-5,j+-5) * -0.00625
                      +in(i+-5,j+-4) * -0.000694444444444
                      +in(i+-5,j+-3) * -0.000694444444444
                      +in(i+-5,j+-2) * -0.000694444444444
                      +in(i+-5,j+-1) * -0.000694444444444
                      +in(i+-5,j+0) * -0.000694444444444
                      +in(i+-5,j+1) * -0.000694444444444
                      +in(i+-5,j+2) * -0.000694444444444
                      +in(i+-5,j+3) * -0.000694444444444
                      +in(i+-5,j+4) * -0.000694444444444
                      +in(i+-5,j+6) * 0.000473484848485
                      +in(i+-5,j+7) * 0.000343406593407
                      +in(i+-5,j+8) * 0.000260416666667
                      +in(i+-4,j+-8) * -0.000260416666667
                      +in(i+-4,j+-7) * -0.000343406593407
                      +in(i+-4,j+-6) * -0.000473484848485
                      +in(i+-4,j+-5) * -0.000694444444444
                      +in(i+-4,j+-4) * -0.0078125
                      +in(i+-4,j+-3) * -0.00111607142857
                      +in(i+-4,j+-2) * -0.00111607142857
                      +in(i+-4,j+-1) * -0.00111607142857
                      +in(i+-4,j+0) * -0.00111607142857
                      +in(i+-4,j+1) * -0.00111607142857
                      +in(i+-4,j+2) * -0.00111607142857
                      +in(i+-4,j+3) * -0.00111607142857
                      +in(i+-4,j+5) * 0.000694444444444
                      +in(i+-4,j+6) * 0.000473484848485
                      +in(i+-4,j+7) * 0.000343406593407
                      +in(i+-4,j+8) * 0.000260416666667
                      +in(i+-3,j+-8) * -0.000260416666667
                      +in(i+-3,j+-7) * -0.000343406593407
                      +in(i+-3,j+-6) * -0.000473484848485
                      +in(i+-3,j+-5) * -0.000694444444444
                      +in(i+-3,j+-4) * -0.00111607142857
                      +in(i+-3,j+-3) * -0.0104166666667
                      +in(i+-3,j+-2) * -0.00208333333333
                      +in(i+-3,j+-1) * -0.00208333333333
                      +in(i+-3,j+0) * -0.00208333333333
                      +in(i+-3,j+1) * -0.00208333333333
                      +in(i+-3,j+2) * -0.00208333333333
                      +in(i+-3,j+4) * 0.00111607142857
                      +in(i+-3,j+5) * 0.000694444444444
                      +in(i+-3,j+6) * 0.000473484848485
                      +in(i+-3,j+7) * 0.000343406593407
                      +in(i+-3,j+8) * 0.000260416666667
                      +in(i+-2,j+-8) * -0.000260416666667
                      +in(i+-2,j+-7) * -0.000343406593407
                      +in(i+-2,j+-6) * -0.000473484848485
                      +in(i+-2,j+-5) * -0.000694444444444
                      +in(i+-2,j+-4) * -0.00111607142857
                      +in(i+-2,j+-3) * -0.00208333333333
                      +in(i+-2,j+-2) * -0.015625
                      +in(i+-2,j+-1) * -0.00520833333333
                      +in(i+-2,j+0) * -0.00520833333333
                      +in(i+-2,j+1) * -0.00520833333333
                      +in(i+-2,j+3) * 0.00208333333333
                      +in(i+-2,j+4) * 0.00111607142857
                      +in(i+-2,j+5) * 0.000694444444444
                      +in(i+-2,j+6) * 0.000473484848485
                      +in(i+-2,j+7) * 0.000343406593407
                      +in(i+-2,j+8) * 0.000260416666667
                      +in(i+-1,j+-8) * -0.000260416666667
                      +in(i+-1,j+-7) * -0.000343406593407
                      +in(i+-1,j+-6) * -0.000473484848485
                      +in(i+-1,j+-5) * -0.000694444444444
                      +in(i+-1,j+-4) * -0.00111607142857
                      +in(i+-1,j+-3) * -0.00208333333333
                      +in(i+-1,j+-2) * -0.00520833333333
                      +in(i+-1,j+-1) * -0.03125
                      +in(i+-1,j+0) * -0.03125
                      +in(i+-1,j+2) * 0.00520833333333
                      +in(i+-1,j+3) * 0.00208333333333
                      +in(i+-1,j+4) * 0.00111607142857
                      +in(i+-1,j+5) * 0.000694444444444
                      +in(i+-1,j+6) * 0.000473484848485
                      +in(i+-1,j+7) * 0.000343406593407
                      +in(i+-1,j+8) * 0.000260416666667
                      +in(i+0,j+-8) * -0.000260416666667
                      +in(i+0,j+-7) * -0.000343406593407
                      +in(i+0,j+-6) * -0.000473484848485
                      +in(i+0,j+-5) * -0.000694444444444
                      +in(i+0,j+-4) * -0.00111607142857
                      +in(i+0,j+-3) * -0.00208333333333
                      +in(i+0,j+-2) * -0.00520833333333
                      +in(i+0,j+-1) * -0.03125
                      +in(i+0,j+1) * 0.03125
                      +in(i+0,j+2) * 0.00520833333333
                      +in(i+0,j+3) * 0.00208333333333
                      +in(i+0,j+4) * 0.00111607142857
                      +in(i+0,j+5) * 0.000694444444444
                      +in(i+0,j+6) * 0.000473484848485
                      +in(i+0,j+7) * 0.000343406593407
                      +in(i+0,j+8) * 0.000260416666667
                      +in(i+1,j+-8) * -0.000260416666667
                      +in(i+1,j+-7) * -0.000343406593407
                      +in(i+1,j+-6) * -0.000473484848485
                      +in(i+1,j+-5) * -0.000694444444444
                      +in(i+1,j+-4) * -0.00111607142857
                      +in(i+1,j+-3) * -0.00208333333333
                      +in(i+1,j+-2) * -0.00520833333333
                      +in(i+1,j+0) * 0.03125
                      +in(i+1,j+1) * 0.03125
                      +in(i+1,j+2) * 0.00520833333333
                      +in(i+1,j+3) * 0.00208333333333
                      +in(i+1,j+4) * 0.00111607142857
                      +in(i+1,j+5) * 0.000694444444444
                      +in(i+1,j+6) * 0.000473484848485
                      +in(i+1,j+7) * 0.000343406593407
                      +in(i+1,j+8) * 0.000260416666667
                      +in(i+2,j+-8) * -0.000260416666667
                      +in(i+2,j+-7) * -0.000343406593407
                      +in(i+2,j+-6) * -0.000473484848485
                      +in(i+2,j+-5) * -0.000694444444444
                      +in(i+2,j+-4) * -0.00111607142857
                      +in(i+2,j+-3) * -0.00208333333333
                      +in(i+2,j+-1) * 0.00520833333333
                      +in(i+2,j+0) * 0.00520833333333
                      +in(i+2,j+1) * 0.00520833333333
                      +in(i+2,j+2) * 0.015625
                      +in(i+2,j+3) * 0.00208333333333
                      +in(i+2,j+4) * 0.00111607142857
                      +in(i+2,j+5) * 0.000694444444444
                      +in(i+2,j+6) * 0.000473484848485
                      +in(i+2,j+7) * 0.000343406593407
                      +in(i+2,j+8) * 0.000260416666667
                      +in(i+3,j+-8) * -0.000260416666667
                      +in(i+3,j+-7) * -0.000343406593407
                      +in(i+3,j+-6) * -0.000473484848485
                      +in(i+3,j+-5) * -0.000694444444444
                      +in(i+3,j+-4) * -0.00111607142857
                      +in(i+3,j+-2) * 0.00208333333333
                      +in(i+3,j+-1) * 0.00208333333333
                      +in(i+3,j+0) * 0.00208333333333
                      +in(i+3,j+1) * 0.00208333333333
                      +in(i+3,j+2) * 0.00208333333333
                      +in(i+3,j+3) * 0.0104166666667
                      +in(i+3,j+4) * 0.00111607142857
                      +in(i+3,j+5) * 0.000694444444444
                      +in(i+3,j+6) * 0.000473484848485
                      +in(i+3,j+7) * 0.000343406593407
                      +in(i+3,j+8) * 0.000260416666667
                      +in(i+4,j+-8) * -0.000260416666667
                      +in(i+4,j+-7) * -0.000343406593407
                      +in(i+4,j+-6) * -0.000473484848485
                      +in(i+4,j+-5) * -0.000694444444444
                      +in(i+4,j+-3) * 0.00111607142857
                      +in(i+4,j+-2) * 0.00111607142857
                      +in(i+4,j+-1) * 0.00111607142857
                      +in(i+4,j+0) * 0.00111607142857
                      +in(i+4,j+1) * 0.00111607142857
                      +in(i+4,j+2) * 0.00111607142857
                      +in(i+4,j+3) * 0.00111607142857
                      +in(i+4,j+4) * 0.0078125
                      +in(i+4,j+5) * 0.000694444444444
                      +in(i+4,j+6) * 0.000473484848485
                      +in(i+4,j+7) * 0.000343406593407
                      +in(i+4,j+8) * 0.000260416666667
                      +in(i+5,j+-8) * -0.000260416666667
                      +in(i+5,j+-7) * -0.000343406593407
                      +in(i+5,j+-6) * -0.000473484848485
                      +in(i+5,j+-4) * 0.000694444444444
                      +in(i+5,j+-3) * 0.000694444444444
                      +in(i+5,j+-2) * 0.000694444444444
                      +in(i+5,j+-1) * 0.000694444444444
                      +in(i+5,j+0) * 0.000694444444444
                      +in(i+5,j+1) * 0.000694444444444
                      +in(i+5,j+2) * 0.000694444444444
                      +in(i+5,j+3) * 0.000694444444444
                      +in(i+5,j+4) * 0.000694444444444
                      +in(i+5,j+5) * 0.00625
                      +in(i+5,j+6) * 0.000473484848485
                      +in(i+5,j+7) * 0.000343406593407
                      +in(i+5,j+8) * 0.000260416666667
                      +in(i+6,j+-8) * -0.000260416666667
                      +in(i+6,j+-7) * -0.000343406593407
                      +in(i+6,j+-5) * 0.000473484848485
                      +in(i+6,j+-4) * 0.000473484848485
                      +in(i+6,j+-3) * 0.000473484848485
                      +in(i+6,j+-2) * 0.000473484848485
                      +in(i+6,j+-1) * 0.000473484848485
                      +in(i+6,j+0) * 0.000473484848485
                      +in(i+6,j+1) * 0.000473484848485
                      +in(i+6,j+2) * 0.000473484848485
                      +in(i+6,j+3) * 0.000473484848485
                      +in(i+6,j+4) * 0.000473484848485
                      +in(i+6,j+5) * 0.000473484848485
                      +in(i+6,j+6) * 0.00520833333333
                      +in(i+6,j+7) * 0.000343406593407
                      +in(i+6,j+8) * 0.000260416666667
                      +in(i+7,j+-8) * -0.000260416666667
                      +in(i+7,j+-6) * 0.000343406593407
                      +in(i+7,j+-5) * 0.000343406593407
                      +in(i+7,j+-4) * 0.000343406593407
                      +in(i+7,j+-3) * 0.000343406593407
                      +in(i+7,j+-2) * 0.000343406593407
                      +in(i+7,j+-1) * 0.000343406593407
                      +in(i+7,j+0) * 0.000343406593407
                      +in(i+7,j+1) * 0.000343406593407
                      +in(i+7,j+2) * 0.000343406593407
                      +in(i+7,j+3) * 0.000343406593407
                      +in(i+7,j+4) * 0.000343406593407
                      +in(i+7,j+5) * 0.000343406593407
                      +in(i+7,j+6) * 0.000343406593407
                      +in(i+7,j+7) * 0.00446428571429
                      +in(i+7,j+8) * 0.000260416666667
                      +in(i+8,j+-7) * 0.000260416666667
                      +in(i+8,j+-6) * 0.000260416666667
                      +in(i+8,j+-5) * 0.000260416666667
                      +in(i+8,j+-4) * 0.000260416666667
                      +in(i+8,j+-3) * 0.000260416666667
                      +in(i+8,j+-2) * 0.000260416666667
                      +in(i+8,j+-1) * 0.000260416666667
                      +in(i+8,j+0) * 0.000260416666667
                      +in(i+8,j+1) * 0.000260416666667
                      +in(i+8,j+2) * 0.000260416666667
                      +in(i+8,j+3) * 0.000260416666667
                      +in(i+8,j+4) * 0.000260416666667
                      +in(i+8,j+5) * 0.000260416666667
                      +in(i+8,j+6) * 0.000260416666667
                      +in(i+8,j+7) * 0.000260416666667
                      +in(i+8,j+8) * 0.00390625
                      ;
       }
     });
}

void grid9(const int n, Kokkos::View<double**, Kokkos::LayoutRight> & in, Kokkos::View<double**, Kokkos::LayoutRight> & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::OpenMP>(0,n),[&] (int i) {
      for (auto j=9; j<n-9; ++j) {
          out(i,j) += +in(i+-9,j+-9) * -0.00308641975309
                      +in(i+-9,j+-8) * -0.000181554103123
                      +in(i+-9,j+-7) * -0.000181554103123
                      +in(i+-9,j+-6) * -0.000181554103123
                      +in(i+-9,j+-5) * -0.000181554103123
                      +in(i+-9,j+-4) * -0.000181554103123
                      +in(i+-9,j+-3) * -0.000181554103123
                      +in(i+-9,j+-2) * -0.000181554103123
                      +in(i+-9,j+-1) * -0.000181554103123
                      +in(i+-9,j+0) * -0.000181554103123
                      +in(i+-9,j+1) * -0.000181554103123
                      +in(i+-9,j+2) * -0.000181554103123
                      +in(i+-9,j+3) * -0.000181554103123
                      +in(i+-9,j+4) * -0.000181554103123
                      +in(i+-9,j+5) * -0.000181554103123
                      +in(i+-9,j+6) * -0.000181554103123
                      +in(i+-9,j+7) * -0.000181554103123
                      +in(i+-9,j+8) * -0.000181554103123
                      +in(i+-8,j+-9) * -0.000181554103123
                      +in(i+-8,j+-8) * -0.00347222222222
                      +in(i+-8,j+-7) * -0.000231481481481
                      +in(i+-8,j+-6) * -0.000231481481481
                      +in(i+-8,j+-5) * -0.000231481481481
                      +in(i+-8,j+-4) * -0.000231481481481
                      +in(i+-8,j+-3) * -0.000231481481481
                      +in(i+-8,j+-2) * -0.000231481481481
                      +in(i+-8,j+-1) * -0.000231481481481
                      +in(i+-8,j+0) * -0.000231481481481
                      +in(i+-8,j+1) * -0.000231481481481
                      +in(i+-8,j+2) * -0.000231481481481
                      +in(i+-8,j+3) * -0.000231481481481
                      +in(i+-8,j+4) * -0.000231481481481
                      +in(i+-8,j+5) * -0.000231481481481
                      +in(i+-8,j+6) * -0.000231481481481
                      +in(i+-8,j+7) * -0.000231481481481
                      +in(i+-8,j+9) * 0.000181554103123
                      +in(i+-7,j+-9) * -0.000181554103123
                      +in(i+-7,j+-8) * -0.000231481481481
                      +in(i+-7,j+-7) * -0.00396825396825
                      +in(i+-7,j+-6) * -0.00030525030525
                      +in(i+-7,j+-5) * -0.00030525030525
                      +in(i+-7,j+-4) * -0.00030525030525
                      +in(i+-7,j+-3) * -0.00030525030525
                      +in(i+-7,j+-2) * -0.00030525030525
                      +in(i+-7,j+-1) * -0.00030525030525
                      +in(i+-7,j+0) * -0.00030525030525
                      +in(i+-7,j+1) * -0.00030525030525
                      +in(i+-7,j+2) * -0.00030525030525
                      +in(i+-7,j+3) * -0.00030525030525
                      +in(i+-7,j+4) * -0.00030525030525
                      +in(i+-7,j+5) * -0.00030525030525
                      +in(i+-7,j+6) * -0.00030525030525
                      +in(i+-7,j+8) * 0.000231481481481
                      +in(i+-7,j+9) * 0.000181554103123
                      +in(i+-6,j+-9) * -0.000181554103123
                      +in(i+-6,j+-8) * -0.000231481481481
                      +in(i+-6,j+-7) * -0.00030525030525
                      +in(i+-6,j+-6) * -0.00462962962963
                      +in(i+-6,j+-5) * -0.000420875420875
                      +in(i+-6,j+-4) * -0.000420875420875
                      +in(i+-6,j+-3) * -0.000420875420875
                      +in(i+-6,j+-2) * -0.000420875420875
                      +in(i+-6,j+-1) * -0.000420875420875
                      +in(i+-6,j+0) * -0.000420875420875
                      +in(i+-6,j+1) * -0.000420875420875
                      +in(i+-6,j+2) * -0.000420875420875
                      +in(i+-6,j+3) * -0.000420875420875
                      +in(i+-6,j+4) * -0.000420875420875
                      +in(i+-6,j+5) * -0.000420875420875
                      +in(i+-6,j+7) * 0.00030525030525
                      +in(i+-6,j+8) * 0.000231481481481
                      +in(i+-6,j+9) * 0.000181554103123
                      +in(i+-5,j+-9) * -0.000181554103123
                      +in(i+-5,j+-8) * -0.000231481481481
                      +in(i+-5,j+-7) * -0.00030525030525
                      +in(i+-5,j+-6) * -0.000420875420875
                      +in(i+-5,j+-5) * -0.00555555555556
                      +in(i+-5,j+-4) * -0.000617283950617
                      +in(i+-5,j+-3) * -0.000617283950617
                      +in(i+-5,j+-2) * -0.000617283950617
                      +in(i+-5,j+-1) * -0.000617283950617
                      +in(i+-5,j+0) * -0.000617283950617
                      +in(i+-5,j+1) * -0.000617283950617
                      +in(i+-5,j+2) * -0.000617283950617
                      +in(i+-5,j+3) * -0.000617283950617
                      +in(i+-5,j+4) * -0.000617283950617
                      +in(i+-5,j+6) * 0.000420875420875
                      +in(i+-5,j+7) * 0.00030525030525
                      +in(i+-5,j+8) * 0.000231481481481
                      +in(i+-5,j+9) * 0.000181554103123
                      +in(i+-4,j+-9) * -0.000181554103123
                      +in(i+-4,j+-8) * -0.000231481481481
                      +in(i+-4,j+-7) * -0.00030525030525
                      +in(i+-4,j+-6) * -0.000420875420875
                      +in(i+-4,j+-5) * -0.000617283950617
                      +in(i+-4,j+-4) * -0.00694444444444
                      +in(i+-4,j+-3) * -0.000992063492063
                      +in(i+-4,j+-2) * -0.000992063492063
                      +in(i+-4,j+-1) * -0.000992063492063
                      +in(i+-4,j+0) * -0.000992063492063
                      +in(i+-4,j+1) * -0.000992063492063
                      +in(i+-4,j+2) * -0.000992063492063
                      +in(i+-4,j+3) * -0.000992063492063
                      +in(i+-4,j+5) * 0.000617283950617
                      +in(i+-4,j+6) * 0.000420875420875
                      +in(i+-4,j+7) * 0.00030525030525
                      +in(i+-4,j+8) * 0.000231481481481
                      +in(i+-4,j+9) * 0.000181554103123
                      +in(i+-3,j+-9) * -0.000181554103123
                      +in(i+-3,j+-8) * -0.000231481481481
                      +in(i+-3,j+-7) * -0.00030525030525
                      +in(i+-3,j+-6) * -0.000420875420875
                      +in(i+-3,j+-5) * -0.000617283950617
                      +in(i+-3,j+-4) * -0.000992063492063
                      +in(i+-3,j+-3) * -0.00925925925926
                      +in(i+-3,j+-2) * -0.00185185185185
                      +in(i+-3,j+-1) * -0.00185185185185
                      +in(i+-3,j+0) * -0.00185185185185
                      +in(i+-3,j+1) * -0.00185185185185
                      +in(i+-3,j+2) * -0.00185185185185
                      +in(i+-3,j+4) * 0.000992063492063
                      +in(i+-3,j+5) * 0.000617283950617
                      +in(i+-3,j+6) * 0.000420875420875
                      +in(i+-3,j+7) * 0.00030525030525
                      +in(i+-3,j+8) * 0.000231481481481
                      +in(i+-3,j+9) * 0.000181554103123
                      +in(i+-2,j+-9) * -0.000181554103123
                      +in(i+-2,j+-8) * -0.000231481481481
                      +in(i+-2,j+-7) * -0.00030525030525
                      +in(i+-2,j+-6) * -0.000420875420875
                      +in(i+-2,j+-5) * -0.000617283950617
                      +in(i+-2,j+-4) * -0.000992063492063
                      +in(i+-2,j+-3) * -0.00185185185185
                      +in(i+-2,j+-2) * -0.0138888888889
                      +in(i+-2,j+-1) * -0.00462962962963
                      +in(i+-2,j+0) * -0.00462962962963
                      +in(i+-2,j+1) * -0.00462962962963
                      +in(i+-2,j+3) * 0.00185185185185
                      +in(i+-2,j+4) * 0.000992063492063
                      +in(i+-2,j+5) * 0.000617283950617
                      +in(i+-2,j+6) * 0.000420875420875
                      +in(i+-2,j+7) * 0.00030525030525
                      +in(i+-2,j+8) * 0.000231481481481
                      +in(i+-2,j+9) * 0.000181554103123
                      +in(i+-1,j+-9) * -0.000181554103123
                      +in(i+-1,j+-8) * -0.000231481481481
                      +in(i+-1,j+-7) * -0.00030525030525
                      +in(i+-1,j+-6) * -0.000420875420875
                      +in(i+-1,j+-5) * -0.000617283950617
                      +in(i+-1,j+-4) * -0.000992063492063
                      +in(i+-1,j+-3) * -0.00185185185185
                      +in(i+-1,j+-2) * -0.00462962962963
                      +in(i+-1,j+-1) * -0.0277777777778
                      +in(i+-1,j+0) * -0.0277777777778
                      +in(i+-1,j+2) * 0.00462962962963
                      +in(i+-1,j+3) * 0.00185185185185
                      +in(i+-1,j+4) * 0.000992063492063
                      +in(i+-1,j+5) * 0.000617283950617
                      +in(i+-1,j+6) * 0.000420875420875
                      +in(i+-1,j+7) * 0.00030525030525
                      +in(i+-1,j+8) * 0.000231481481481
                      +in(i+-1,j+9) * 0.000181554103123
                      +in(i+0,j+-9) * -0.000181554103123
                      +in(i+0,j+-8) * -0.000231481481481
                      +in(i+0,j+-7) * -0.00030525030525
                      +in(i+0,j+-6) * -0.000420875420875
                      +in(i+0,j+-5) * -0.000617283950617
                      +in(i+0,j+-4) * -0.000992063492063
                      +in(i+0,j+-3) * -0.00185185185185
                      +in(i+0,j+-2) * -0.00462962962963
                      +in(i+0,j+-1) * -0.0277777777778
                      +in(i+0,j+1) * 0.0277777777778
                      +in(i+0,j+2) * 0.00462962962963
                      +in(i+0,j+3) * 0.00185185185185
                      +in(i+0,j+4) * 0.000992063492063
                      +in(i+0,j+5) * 0.000617283950617
                      +in(i+0,j+6) * 0.000420875420875
                      +in(i+0,j+7) * 0.00030525030525
                      +in(i+0,j+8) * 0.000231481481481
                      +in(i+0,j+9) * 0.000181554103123
                      +in(i+1,j+-9) * -0.000181554103123
                      +in(i+1,j+-8) * -0.000231481481481
                      +in(i+1,j+-7) * -0.00030525030525
                      +in(i+1,j+-6) * -0.000420875420875
                      +in(i+1,j+-5) * -0.000617283950617
                      +in(i+1,j+-4) * -0.000992063492063
                      +in(i+1,j+-3) * -0.00185185185185
                      +in(i+1,j+-2) * -0.00462962962963
                      +in(i+1,j+0) * 0.0277777777778
                      +in(i+1,j+1) * 0.0277777777778
                      +in(i+1,j+2) * 0.00462962962963
                      +in(i+1,j+3) * 0.00185185185185
                      +in(i+1,j+4) * 0.000992063492063
                      +in(i+1,j+5) * 0.000617283950617
                      +in(i+1,j+6) * 0.000420875420875
                      +in(i+1,j+7) * 0.00030525030525
                      +in(i+1,j+8) * 0.000231481481481
                      +in(i+1,j+9) * 0.000181554103123
                      +in(i+2,j+-9) * -0.000181554103123
                      +in(i+2,j+-8) * -0.000231481481481
                      +in(i+2,j+-7) * -0.00030525030525
                      +in(i+2,j+-6) * -0.000420875420875
                      +in(i+2,j+-5) * -0.000617283950617
                      +in(i+2,j+-4) * -0.000992063492063
                      +in(i+2,j+-3) * -0.00185185185185
                      +in(i+2,j+-1) * 0.00462962962963
                      +in(i+2,j+0) * 0.00462962962963
                      +in(i+2,j+1) * 0.00462962962963
                      +in(i+2,j+2) * 0.0138888888889
                      +in(i+2,j+3) * 0.00185185185185
                      +in(i+2,j+4) * 0.000992063492063
                      +in(i+2,j+5) * 0.000617283950617
                      +in(i+2,j+6) * 0.000420875420875
                      +in(i+2,j+7) * 0.00030525030525
                      +in(i+2,j+8) * 0.000231481481481
                      +in(i+2,j+9) * 0.000181554103123
                      +in(i+3,j+-9) * -0.000181554103123
                      +in(i+3,j+-8) * -0.000231481481481
                      +in(i+3,j+-7) * -0.00030525030525
                      +in(i+3,j+-6) * -0.000420875420875
                      +in(i+3,j+-5) * -0.000617283950617
                      +in(i+3,j+-4) * -0.000992063492063
                      +in(i+3,j+-2) * 0.00185185185185
                      +in(i+3,j+-1) * 0.00185185185185
                      +in(i+3,j+0) * 0.00185185185185
                      +in(i+3,j+1) * 0.00185185185185
                      +in(i+3,j+2) * 0.00185185185185
                      +in(i+3,j+3) * 0.00925925925926
                      +in(i+3,j+4) * 0.000992063492063
                      +in(i+3,j+5) * 0.000617283950617
                      +in(i+3,j+6) * 0.000420875420875
                      +in(i+3,j+7) * 0.00030525030525
                      +in(i+3,j+8) * 0.000231481481481
                      +in(i+3,j+9) * 0.000181554103123
                      +in(i+4,j+-9) * -0.000181554103123
                      +in(i+4,j+-8) * -0.000231481481481
                      +in(i+4,j+-7) * -0.00030525030525
                      +in(i+4,j+-6) * -0.000420875420875
                      +in(i+4,j+-5) * -0.000617283950617
                      +in(i+4,j+-3) * 0.000992063492063
                      +in(i+4,j+-2) * 0.000992063492063
                      +in(i+4,j+-1) * 0.000992063492063
                      +in(i+4,j+0) * 0.000992063492063
                      +in(i+4,j+1) * 0.000992063492063
                      +in(i+4,j+2) * 0.000992063492063
                      +in(i+4,j+3) * 0.000992063492063
                      +in(i+4,j+4) * 0.00694444444444
                      +in(i+4,j+5) * 0.000617283950617
                      +in(i+4,j+6) * 0.000420875420875
                      +in(i+4,j+7) * 0.00030525030525
                      +in(i+4,j+8) * 0.000231481481481
                      +in(i+4,j+9) * 0.000181554103123
                      +in(i+5,j+-9) * -0.000181554103123
                      +in(i+5,j+-8) * -0.000231481481481
                      +in(i+5,j+-7) * -0.00030525030525
                      +in(i+5,j+-6) * -0.000420875420875
                      +in(i+5,j+-4) * 0.000617283950617
                      +in(i+5,j+-3) * 0.000617283950617
                      +in(i+5,j+-2) * 0.000617283950617
                      +in(i+5,j+-1) * 0.000617283950617
                      +in(i+5,j+0) * 0.000617283950617
                      +in(i+5,j+1) * 0.000617283950617
                      +in(i+5,j+2) * 0.000617283950617
                      +in(i+5,j+3) * 0.000617283950617
                      +in(i+5,j+4) * 0.000617283950617
                      +in(i+5,j+5) * 0.00555555555556
                      +in(i+5,j+6) * 0.000420875420875
                      +in(i+5,j+7) * 0.00030525030525
                      +in(i+5,j+8) * 0.000231481481481
                      +in(i+5,j+9) * 0.000181554103123
                      +in(i+6,j+-9) * -0.000181554103123
                      +in(i+6,j+-8) * -0.000231481481481
                      +in(i+6,j+-7) * -0.00030525030525
                      +in(i+6,j+-5) * 0.000420875420875
                      +in(i+6,j+-4) * 0.000420875420875
                      +in(i+6,j+-3) * 0.000420875420875
                      +in(i+6,j+-2) * 0.000420875420875
                      +in(i+6,j+-1) * 0.000420875420875
                      +in(i+6,j+0) * 0.000420875420875
                      +in(i+6,j+1) * 0.000420875420875
                      +in(i+6,j+2) * 0.000420875420875
                      +in(i+6,j+3) * 0.000420875420875
                      +in(i+6,j+4) * 0.000420875420875
                      +in(i+6,j+5) * 0.000420875420875
                      +in(i+6,j+6) * 0.00462962962963
                      +in(i+6,j+7) * 0.00030525030525
                      +in(i+6,j+8) * 0.000231481481481
                      +in(i+6,j+9) * 0.000181554103123
                      +in(i+7,j+-9) * -0.000181554103123
                      +in(i+7,j+-8) * -0.000231481481481
                      +in(i+7,j+-6) * 0.00030525030525
                      +in(i+7,j+-5) * 0.00030525030525
                      +in(i+7,j+-4) * 0.00030525030525
                      +in(i+7,j+-3) * 0.00030525030525
                      +in(i+7,j+-2) * 0.00030525030525
                      +in(i+7,j+-1) * 0.00030525030525
                      +in(i+7,j+0) * 0.00030525030525
                      +in(i+7,j+1) * 0.00030525030525
                      +in(i+7,j+2) * 0.00030525030525
                      +in(i+7,j+3) * 0.00030525030525
                      +in(i+7,j+4) * 0.00030525030525
                      +in(i+7,j+5) * 0.00030525030525
                      +in(i+7,j+6) * 0.00030525030525
                      +in(i+7,j+7) * 0.00396825396825
                      +in(i+7,j+8) * 0.000231481481481
                      +in(i+7,j+9) * 0.000181554103123
                      +in(i+8,j+-9) * -0.000181554103123
                      +in(i+8,j+-7) * 0.000231481481481
                      +in(i+8,j+-6) * 0.000231481481481
                      +in(i+8,j+-5) * 0.000231481481481
                      +in(i+8,j+-4) * 0.000231481481481
                      +in(i+8,j+-3) * 0.000231481481481
                      +in(i+8,j+-2) * 0.000231481481481
                      +in(i+8,j+-1) * 0.000231481481481
                      +in(i+8,j+0) * 0.000231481481481
                      +in(i+8,j+1) * 0.000231481481481
                      +in(i+8,j+2) * 0.000231481481481
                      +in(i+8,j+3) * 0.000231481481481
                      +in(i+8,j+4) * 0.000231481481481
                      +in(i+8,j+5) * 0.000231481481481
                      +in(i+8,j+6) * 0.000231481481481
                      +in(i+8,j+7) * 0.000231481481481
                      +in(i+8,j+8) * 0.00347222222222
                      +in(i+8,j+9) * 0.000181554103123
                      +in(i+9,j+-8) * 0.000181554103123
                      +in(i+9,j+-7) * 0.000181554103123
                      +in(i+9,j+-6) * 0.000181554103123
                      +in(i+9,j+-5) * 0.000181554103123
                      +in(i+9,j+-4) * 0.000181554103123
                      +in(i+9,j+-3) * 0.000181554103123
                      +in(i+9,j+-2) * 0.000181554103123
                      +in(i+9,j+-1) * 0.000181554103123
                      +in(i+9,j+0) * 0.000181554103123
                      +in(i+9,j+1) * 0.000181554103123
                      +in(i+9,j+2) * 0.000181554103123
                      +in(i+9,j+3) * 0.000181554103123
                      +in(i+9,j+4) * 0.000181554103123
                      +in(i+9,j+5) * 0.000181554103123
                      +in(i+9,j+6) * 0.000181554103123
                      +in(i+9,j+7) * 0.000181554103123
                      +in(i+9,j+8) * 0.000181554103123
                      +in(i+9,j+9) * 0.00308641975309
                      ;
       }
     });
}

